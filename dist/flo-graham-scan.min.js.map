{"version":3,"sources":["flo-graham-scan.min.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","FloGrahamScan","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","stableSort","arr","indxArray","push","sort","b","res","sorted","_i","swap","temp","getSmallestIndxYThenX","ps","smallest","Number","POSITIVE_INFINITY","smallestI","y","grahamScan","ps_","includeAllBoundaryPoints","delta","undefined","DELTA","slice","idx","_ps$splice","splice","_ps$splice2","_slicedToArray","p","Vector","cross","fromTo","Math","abs","unshift","m","p1","p2","p3","ccw","sliceIterator","_arr","_n","_d","_e","_s","Symbol","iterator","next","done","value","err","Array","isArray","Object","TypeError","flo-vector2d","2","FloVector2d","dot","segSegIntersection","ab","cd","_ab","_cd","c","d","denom","rNumer","sNumer","doesSegSegIntersect","squaredDistanceBetween","x","scale","factor","reverse","toUnitVector","scaleFactor","toLength","interpolate","mean","distanceBetween","sqrt","lengthSquared","v","manhattanDistanceBetween","manhattanLength","distanceBetweenPointAndLine","x0","y0","x1","y1","x2","y2","y2_y1","x2_x1","numerator","denominator","squaredDistanceBetweenPointAndLineSegment","w","l2","max","min","circumCenter","triangle","Sx","det3","squaredNorm","Sy","inCenter","l1","l3","lengthSum","centroid","polygon","A","p0","_p","C","_p2","_p3","z","add","equal","rotate","sinAngle","cosAngle","reverseRotate","sinθ","cosθ","rotateBy90Degrees","rotateByNeg90Degrees","transform","getClosestTo","cp","bestd","p_","translatePoints","result","rotatePoints","map","translateThenRotatePoints","rotateThenTranslatePoints"],"mappings":"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","file":"flo-graham-scan.min.js","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.FloGrahamScan = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar Vector = require('flo-vector2d');\n\nvar DELTA = 1e-10;\n\n/**\r\n * Performs a functional stable sort on the given array and \r\n * returns the newly sorted array.\r\n * @ignore\r\n */\nfunction stableSort(arr, f) {\n\tvar indxArray = [];\n\tfor (var i = 0; i < arr.length; i++) {\n\t\tindxArray.push(i);\n\t}\n\n\tindxArray.sort(function (a, b) {\n\t\tvar res = f(arr[a], arr[b]);\n\n\t\tif (res !== 0) {\n\t\t\treturn res;\n\t\t}\n\n\t\treturn a - b;\n\t});\n\n\tvar sorted = [];\n\tfor (var _i = 0; _i < arr.length; _i++) {\n\t\tsorted.push(arr[indxArray[_i]]);\n\t}\n\n\treturn sorted;\n}\n\n/**\r\n * In-place swap two elements in the given array.\r\n * @ignore\r\n */\nfunction swap(arr, a, b) {\n\tif (a === b) {\n\t\treturn;\n\t}\n\n\tvar temp = arr[a];\n\tarr[a] = arr[b];\n\tarr[b] = temp;\n}\n\n/**\r\n * @ignore\r\n */\nfunction getSmallestIndxYThenX(ps) {\n\tvar smallest = [Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY];\n\tvar smallestI = void 0;\n\tfor (var i = 0; i < ps.length; i++) {\n\t\tvar y = ps[i][1];\n\t\tif (y < smallest[1] || y === smallest[1] && ps[i][0] < smallest[0]) {\n\t\t\tsmallestI = i;\n\t\t\tsmallest = ps[i];\n\t\t}\n\t}\n\n\treturn smallestI;\n}\n\n/** \r\n * <p>\r\n * Finds the convex hull of the given set of 2d points using the   \r\n * Graham Scan algorithm and returns the hull as an array of points. \r\n * </p>\r\n * <p>\r\n * See https://en.wikipedia.org/wiki/Graham_scan\r\n * </p>\r\n * @param {number[][]} ps_ - A set of points\r\n * @param {boolean} includeAllBoundaryPoints - Set this to true to if all boundary points\r\n * should be returned, even redundant ones\r\n * @param {number} delta - Tolerance at which three points are considered collinear -\r\n * defaults to 1e-10\r\n * @returns {number[][]}\r\n */\nfunction grahamScan(ps_, includeAllBoundaryPoints, delta) {\n\n\tdelta = delta === undefined ? DELTA : delta;\n\n\tfunction fail(p1, p2, p3) {\n\t\tvar res = Vector.ccw(p1, p2, p3, delta);\n\t\tif (includeAllBoundaryPoints) {\n\t\t\treturn res < 0;\n\t\t}\n\t\treturn res <= 0;\n\t}\n\n\tvar ps = ps_.slice();\n\tvar n = ps.length;\n\n\tvar idx = getSmallestIndxYThenX(ps);\n\n\tvar _ps$splice = ps.splice(idx, 1),\n\t    _ps$splice2 = _slicedToArray(_ps$splice, 1),\n\t    p = _ps$splice2[0];\n\n\tps = stableSort(ps, function (a, b) {\n\t\tvar res = Vector.cross(Vector.fromTo(p, b), Vector.fromTo(p, a));\n\t\tres = Math.abs(res) < delta ? 0 : res;\n\t\tif (res !== 0) {\n\t\t\treturn res;\n\t\t}\n\n\t\tres = a[1] - b[1];\n\t\tres = Math.abs(res) < delta ? 0 : res;\n\t\tif (res !== 0) {\n\t\t\treturn res;\n\t\t}\n\n\t\treturn a[0] - b[0];\n\t});\n\n\tps.unshift(p);\n\n\tvar m = 1;\n\tfor (var i = 2; i < n; i++) {\n\t\twhile (fail(ps[m - 1], ps[m], ps[i])) {\n\t\t\tif (m > 1) {\n\t\t\t\tm -= 1;\n\t\t\t\tcontinue;\n\t\t\t} else if (i === n - 1) {\n\t\t\t\tm -= 1;\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\ti += 1;\n\t\t\t}\n\t\t}\n\n\t\tm += 1;\n\t\tswap(ps, m, i);\n\t}\n\n\treturn ps.slice(0, m + 1);\n}\n\nmodule.exports = grahamScan;\n\n},{\"flo-vector2d\":2}],2:[function(require,module,exports){\n(function (global){\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.FloVector2d = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar DELTA = 1e-10;\n\n/*\r\n * Purely functional 2d vector utilities.\r\n */\nvar Vector = {\n\tdot: dot,\n\tcross: cross,\n\tccw: ccw,\n\tsegSegIntersection: segSegIntersection,\n\tdoesSegSegIntersect: doesSegSegIntersect,\n\tsquaredDistanceBetween: squaredDistanceBetween,\n\tscale: scale,\n\treverse: reverse,\n\ttoUnitVector: toUnitVector,\n\ttoLength: toLength,\n\tfromTo: fromTo,\n\tinterpolate: interpolate,\n\tmean: mean,\n\tdistanceBetween: distanceBetween,\n\tlength: length,\n\tlengthSquared: lengthSquared,\n\tmanhattanDistanceBetween: manhattanDistanceBetween,\n\tmanhattanLength: manhattanLength,\n\tdistanceBetweenPointAndLine: distanceBetweenPointAndLine,\n\tsquaredDistanceBetweenPointAndLineSegment: squaredDistanceBetweenPointAndLineSegment,\n\tcircumCenter: circumCenter,\n\tinCenter: inCenter,\n\tcentroid: centroid,\n\tequal: equal,\n\trotate: rotate,\n\treverseRotate: reverseRotate,\n\trotateBy90Degrees: rotateBy90Degrees,\n\trotateByNeg90Degrees: rotateByNeg90Degrees,\n\ttransform: transform,\n\tgetClosestTo: getClosestTo,\n\ttranslatePoints: translatePoints,\n\trotatePoints: rotatePoints,\n\ttranslateThenRotatePoints: translateThenRotatePoints,\n\trotateThenTranslatePoints: rotateThenTranslatePoints\n\n\t/** \r\n  * Returns the dot (inner) product between two 2-vectors. \r\n  * @param {number} a - The first vector\r\n  * @param {number} b - The second vector\r\n  * @returns {number}\r\n  */\n};function dot(a, b) {\n\treturn a[0] * b[0] + a[1] * b[1];\n}\n\n/** \r\n * Returns the cross product signed magnitude between two 2-vectors.\r\n * @param {number} a - The first vector\r\n * @param {number} b - The second vector\r\n * @returns {number}\r\n */\nfunction cross(a, b) {\n\treturn a[0] * b[1] - a[1] * b[0];\n}\n\n/**\r\n * Three 2d points are a counter-clockwise turn if ccw > 0, \r\n * clockwise if ccw < 0, and colinear if ccw = 0 because ccw is a \r\n * determinant that gives twice the signed area of the triangle formed \r\n * by p1, p2 and p3.\r\n * @param {number[]} p1 - The first point\r\n * @param {number[]} p2 - The second point\r\n * @param {number[]} p3 - The third point\r\n * @param {number} delta - The tolerance at which the three points are \r\n * considered colinear - defaults to 1e-10\r\n * @returns {number}\r\n */\nfunction ccw(p1, p2, p3, delta) {\n\tdelta = delta === undefined ? DELTA : delta;\n\n\tvar res = (p2[0] - p1[0]) * (p3[1] - p1[1]) - (p2[1] - p1[1]) * (p3[0] - p1[0]);\n\n\treturn Math.abs(res) <= delta ? 0 : res;\n}\n\n/**\r\n * <p>\r\n * Finds the point where two 2d line segments intersect.\r\n * </p>\r\n * <p>\r\n * See <a href=\"http://algs4.cs.princeton.edu/91primitives\">Geometric primitves</a>\r\n * </p> \r\n * @param {number[][]} ab - The first line \r\n * @param {number[][]} cd - The second line\r\n * @param {number} delta - The tolerance at which the lines are considered \r\n * parallel - defaults to 1e-10\r\n * @returns {number[]} The point where the two line segments intersect  \r\n * or undefined if they don't intersect or a line if they intersect at \r\n * infinitely many points. \r\n */\nfunction segSegIntersection(ab, cd, delta) {\n\tdelta = delta === undefined ? DELTA : delta;\n\n\tvar _ab = _slicedToArray(ab, 2),\n\t    a = _ab[0],\n\t    b = _ab[1];\n\n\tvar _cd = _slicedToArray(cd, 2),\n\t    c = _cd[0],\n\t    d = _cd[1];\n\n\tvar denom = (b[0] - a[0]) * (d[1] - c[1]) - (b[1] - a[1]) * (d[0] - c[0]);\n\tvar rNumer = (a[1] - c[1]) * (d[0] - c[0]) - (a[0] - c[0]) * (d[1] - c[1]);\n\tvar sNumer = (a[1] - c[1]) * (b[0] - a[0]) - (a[0] - c[0]) * (b[1] - a[1]);\n\n\tif (Math.abs(denom) <= delta) {\n\t\t// parallel\n\t\tif (Math.abs(rNumer) <= delta) {\n\t\t\t// colinear\n\t\t\t// TODO Check if x-projections and y-projections intersect\n\t\t\t// and return the line of intersection if they do.\n\t\t\treturn undefined;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tvar r = rNumer / denom;\n\tvar s = sNumer / denom;\n\n\tif (0 <= r && r <= 1 && 0 <= s && s <= 1) {\n\t\treturn [a[0] + r * (b[0] - a[0]), a[1] + r * (b[1] - a[1])];\n\t}\n\n\treturn undefined;\n}\n\n/**\r\n * Returns true if the two given 2d line segments intersect, false otherwise.\r\n * @param {number[][]} a - A line segment\r\n * @param {number[][]} b - Another line segment\r\n * @returns {boolean}\r\n */\nfunction doesSegSegIntersect(a, b) {\n\tif (ccw(a[0], a[1], b[0]) * ccw(a[0], a[1], b[1]) > 0) {\n\t\treturn false;\n\t}\n\tif (ccw(b[0], b[1], a[0]) * ccw(b[0], b[1], a[1]) > 0) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n/** \r\n * Returns the squared distance between two 2d points.\r\n * @param {number[]} p1 - A point\r\n * @param {number[]} p2 - Another point\r\n * @returns {number}\r\n */\nfunction squaredDistanceBetween(p1, p2) {\n\tvar x = p2[0] - p1[0];\n\tvar y = p2[1] - p1[1];\n\n\treturn x * x + y * y;\n}\n\n/**\r\n * Returns a scaled version of the given 2-vector.\r\n * @param {number[]} p - A vector\r\n * @param {number} factor - A scale factor\r\n * @returns {number[]}\r\n */\nfunction scale(p, factor) {\n\treturn [p[0] * factor, p[1] * factor];\n}\n\n/**\r\n * Returns the 2-vector reversed.\r\n * @param {number[]} p \r\n * @returns {number[]}\r\n */\nfunction reverse(p) {\n\treturn [-p[0], -p[1]];\n}\n\n/**\r\n * Returns the given 2-vector scaled to a length of one.\r\n * @param {number[]} p\r\n * @returns {number[]}\r\n */\nfunction toUnitVector(p) {\n\tvar scaleFactor = 1 / length(p);\n\n\treturn [p[0] * scaleFactor, p[1] * scaleFactor];\n}\n\n/**\r\n * Returns the given 2-vector scaled to the given length.\r\n * @param {number[]} p \r\n * @param {number} length \r\n * @returns {number[]}\r\n */\nfunction toLength(p, length) {\n\tvar scaleFactor = length / length(p);\n\n\treturn [p[0] * scaleFactor, p[1] * scaleFactor];\n}\n\n/** \r\n * Returns the second 2-vector minus the first.\r\n * @param {number[]} p1 - The first vector\r\n * @param {number[]} p2 - The second vector\r\n * @returns {number[]}\r\n */\nfunction fromTo(p1, p2) {\n\treturn [p2[0] - p1[0], p2[1] - p1[1]];\n}\n\n/**\r\n * Performs linear interpolation between two 2d points and returns the resultant point.\r\n * @param {number[]} p1 - The first point.\r\n * @param {number[]} p2 - The second point.\r\n * @param {number} t - The interpolation fraction (usually in [0,1]).  \r\n * @returns {number[]}\r\n */\nfunction interpolate(p1, p2, t) {\n\treturn [p1[0] + (p2[0] - p1[0]) * t, p1[1] + (p2[1] - p1[1]) * t];\n}\n\n/**\r\n * Returns the mean point value of the provided array of two 2d points. \r\n * @param {number[][]} ps - The two points\r\n * @returns {number[]}\r\n */\nfunction mean(ps) {\n\tvar p1 = ps[0];\n\tvar p2 = ps[1];\n\n\treturn [(p1[0] + p2[0]) / 2, (p1[1] + p2[1]) / 2];\n}\n\n/** \r\n * Returns the distance between two 2d points.\r\n * @param {number[]} p1 - A point.\r\n * @param {number[]} p2 - Another point.\r\n * @returns {number}\r\n */\nfunction distanceBetween(p1, p2) {\n\treturn Math.sqrt(squaredDistanceBetween(p1, p2));\n}\n\n/** \r\n * Returns the length of the given 2-vector.\r\n * @param {number[]} p - A vector\r\n * @returns {number}\r\n */\nfunction length(p) {\n\treturn Math.sqrt(p[0] * p[0] + p[1] * p[1]);\n}\n\n/**\r\n * Returns the squared length of the given 2-vector.\r\n * @param {number[]} p - A vector\r\n * @returns {number}\r\n */\nfunction lengthSquared(v) {\n\treturn v[0] * v[0] + v[1] * v[1];\n}\n\n/** \r\n * Returns the Manhattan distance between two 2d points.\r\n * @param {number[]} p1 - A point.\r\n * @param {number[]} p2 - Another point.\r\n * @returns {number}\r\n */\nfunction manhattanDistanceBetween(p1, p2) {\n\treturn Math.abs(p1[0] - p2[0]) + Math.abs(p1[1] - p2[1]);\n}\n\n/** \r\n * Returns the Manhattan length of the given 2-vector.\r\n * @param {number[]} p - A vector\r\n * @returns {number}\r\n */\nfunction manhattanLength(p) {\n\treturn Math.abs(p[0]) + Math.abs(p[1]);\n}\n\n/**\r\n * <p>\r\n * Returns the distance between the given point and line. \r\n * </p>\r\n * <p>\r\n * See https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points \r\n * </p>\r\n * @param {number[]} p - A point\r\n * @param {number[][]} l - A line\r\n * @returns {number}\r\n */\nfunction distanceBetweenPointAndLine(p, l) {\n\tvar x0 = p[0];\n\tvar y0 = p[1];\n\tvar x1 = l[0][0];\n\tvar y1 = l[0][1];\n\tvar x2 = l[1][0];\n\tvar y2 = l[1][1];\n\n\tvar y2_y1 = y2 - y1;\n\tvar x2_x1 = x2 - x1;\n\n\tvar numerator = y2_y1 * x0 - x2_x1 * y0 + x2 * y1 - y2 * x1;\n\tvar denominator = Math.sqrt(y2_y1 * y2_y1 + x2_x1 * x2_x1);\n\n\treturn Math.abs(numerator / denominator);\n}\n\n/**\r\n * Return the squared distance between the given point and line segment. \r\n * @param {number[]} p - A point\r\n * @param {number[][]} l - A line\r\n * @returns {number}\r\n */\nfunction squaredDistanceBetweenPointAndLineSegment(p, l) {\n\tvar v = l[0];\n\tvar w = l[1];\n\n\tvar l2 = squaredDistanceBetween(v, w);\n\tif (l2 == 0) {\n\t\treturn squaredDistanceBetween(p, v);\n\t}\n\n\tvar t = ((p[0] - v[0]) * (w[0] - v[0]) + (p[1] - v[1]) * (w[1] - v[1])) / l2;\n\tt = Math.max(0, Math.min(1, t));\n\n\tvar d2 = squaredDistanceBetween(p, [v[0] + t * (w[0] - v[0]), v[1] + t * (w[1] - v[1])]);\n\n\treturn d2;\n}\n\n/**\r\n * Returns the circumcenter of the given 2d triangle (given as three 2d points).\r\n * @param {number[][]} triangle \r\n * @returns {number[]}\r\n */\nfunction circumCenter(triangle) {\n\t// See wikipedia\n\tvar p1 = triangle[0];\n\tvar p2 = triangle[1];\n\tvar p3 = triangle[2];\n\n\tvar Sx = 0.5 * det3([squaredNorm(p1), p1[1], 1], [squaredNorm(p2), p2[1], 1], [squaredNorm(p3), p3[1], 1]);\n\n\tvar Sy = 0.5 * det3([p1[0], squaredNorm(p1), 1], [p2[0], squaredNorm(p2), 1], [p3[0], squaredNorm(p3), 1]);\n\n\tvar a = det3([p1[0], p1[1], 1], [p2[0], p2[1], 1], [p3[0], p3[1], 1]);\n\n\tvar b = det3([p1[0], p1[1], squaredNorm(p1)], [p2[0], p2[1], squaredNorm(p2)], [p3[0], p3[1], squaredNorm(p3)]);\n\n\treturn [Sx / a, Sy / a];\n}\n\n/** \r\n * <p>\r\n * Returns the incenter of the given triangle.\r\n * </p>\r\n * <p>\r\n * See Wikipedia - https://en.wikipedia.org/wiki/Incenter \r\n * </p>\r\n * @param {number[][]} triangle \r\n * @returns {number[]}\r\n */\nfunction inCenter(triangle) {\n\tvar p1 = triangle[0];\n\tvar p2 = triangle[1];\n\tvar p3 = triangle[2];\n\n\tvar l1 = distanceBetween(p2, p3);\n\tvar l2 = distanceBetween(p1, p3);\n\tvar l3 = distanceBetween(p1, p2);\n\tvar lengthSum = l1 + l2 + l3;\n\treturn [(l1 * p1[0] + l2 * p2[0] + l3 * p3[0]) / lengthSum, (l1 * p1[1] + l2 * p2[1] + l3 * p3[1]) / lengthSum];\n}\n\n/**\r\n * Returns the centroid of the given polygon, e.g. triangle. The polygon\r\n * must be simple, i.e. not self-intersecting.\r\n * @param {number[][]} polygon \r\n * @returns {number[]}\r\n */\nfunction centroid(polygon) {\n\tif (polygon.length === 3) {\n\t\tvar p1 = polygon[0];\n\t\tvar p2 = polygon[1];\n\t\tvar p3 = polygon[2];\n\n\t\tvar x = p1[0] + p2[0] + p3[0];\n\t\tvar y = p1[1] + p2[1] + p3[1];\n\n\t\treturn [x / 3, y / 3];\n\t}\n\n\t// polygon.length assumed > 3 and assumed to be non-self-intersecting\n\t// See wikipedia\n\n\t// First calculate the area, A, of the polygon\n\tvar A = 0;\n\tfor (var i = 0; i < polygon.length; i++) {\n\t\tvar p0 = polygon[i];\n\t\tvar _p = i === polygon.length - 1 ? polygon[0] : polygon[i + 1];\n\n\t\tA = A + (p0[0] * _p[1] - _p[0] * p0[1]);\n\t}\n\tA = A / 2;\n\n\tvar C = [0, 0];\n\tfor (var _i = 0; _i < polygon.length; _i++) {\n\t\tvar _p2 = polygon[_i];\n\t\tvar _p3 = _i === polygon.length - 1 ? polygon[0] : polygon[_i + 1];\n\n\t\tC[0] = C[0] + (_p2[0] + _p3[0]) * (_p2[0] * _p3[1] - _p3[0] * _p2[1]);\n\t\tC[1] = C[1] + (_p2[1] + _p3[1]) * (_p2[0] * _p3[1] - _p3[0] * _p2[1]);\n\t}\n\n\treturn [C[0] / (6 * A), C[1] / (6 * A)];\n}\n\n/**\r\n * Calculate the determinant of three 3-vectors, i.e. 3x3 matrix\r\n * @param {number[]} x \r\n * @param {number[]} y\r\n * @param {number[]} z\r\n * @returns {number}\r\n */\nfunction det3(x, y, z) {\n\treturn x[0] * (y[1] * z[2] - y[2] * z[1]) - x[1] * (y[0] * z[2] - y[2] * z[0]) + x[2] * (y[0] * z[1] - y[1] * z[0]);\n}\n\n/**\r\n * Returns the result of adding two 2-vectors.\r\n * @param {number[]} a - A vector\r\n * @param {number[]} b - Another vector\r\n * @param {number[]}\r\n */\nfunction add(a, b) {\n\treturn [a[0] + b[0], a[1] + b[1]];\n}\n\n/**\r\n * Returns true if two 2-vectors are identical, false otherwise.\r\n * @param {number[]} a\r\n * @param {number[]} b\r\n * @returns {boolean}\r\n */\nfunction equal(a, b) {\n\treturn a[0] === b[0] && a[1] === b[1];\n}\n\n/**\r\n * Returns a rotated version of the given 2-vector given the sine and cosine of the angle.\r\n * @param {number[]} p \r\n * @param {number} sinAngle \r\n * @param {number} cosAngle \r\n * @returns {number[]}\r\n */\nfunction rotate(p, sinAngle, cosAngle) {\n\treturn [p[0] * cosAngle - p[1] * sinAngle, p[0] * sinAngle + p[1] * cosAngle];\n}\n\n/**\r\n * Returns a anti-clockwise rotated version of the given 2-vector given the sine and cosine of the angle.\r\n * @param {number[]} p \r\n * @param {number} sinθ\r\n * @param {number} cosθ\r\n * @returns {number[]}\r\n */\nfunction reverseRotate(p, sinθ, cosθ) {\n\treturn [+p[0] * cosθ + p[1] * sinθ, -p[0] * sinθ + p[1] * cosθ];\n}\n\n/**\r\n * Returns a 90 degrees rotated version of the given 2-vector.\r\n * @param {number[]} p \r\n * @returns {number[]}\r\n */\nfunction rotateBy90Degrees(p) {\n\treturn [-p[1], p[0]];\n}\n\n/**\r\n * Returns a negative 90 degrees rotated version of the given 2-vector.\r\n * @param {number[]} p \r\n * @returns {number[]}\r\n */\nfunction rotateByNeg90Degrees(p) {\n\treturn [p[1], -p[0]];\n}\n\n/**\r\n * Transforms the given 2-vector by applying the given function to each coordinate.\r\n * @param {number[]} p \r\n * @param {function} f \r\n * @returns {*[]}\r\n */\nfunction transform(p, f) {\n\treturn [f(p[0]), f(p[1])];\n}\n\n/**\r\n * Returns the closest point to the array of 2d points, optionally providing a distance function.\r\n * @param {number[]} p\r\n * @param {number[][]} ps\r\n * @param {function} f - Distance function - if undefined uses squaredDistanceBetween\r\n */\nfunction getClosestTo(p, ps, f) {\n\tf = f === undefined ? squaredDistanceBetween : f;\n\n\tvar cp = undefined; // Closest Point\n\tvar bestd = Number.POSITIVE_INFINITY;\n\tfor (var i = 0; i < ps.length; i++) {\n\t\tvar p_ = ps[i];\n\n\t\tvar d = f(p, p_);\n\t\tif (d < bestd) {\n\t\t\tcp = p_;\n\t\t\tbestd = d;\n\t\t}\n\t}\n\n\treturn cp;\n}\n\n/**\r\n * Return the given 2d points translated by the given 2d vector.\r\n * @param {number[][]} ps \r\n * @param {number[]} v \r\n * @returns {number[][]}\r\n */\nfunction translatePoints(ps, v) {\n\t// SLOW!\n\t/*return ps.map(function(p) {\r\n \t//return add(p, v);\r\n \treturn [p[0]+v[0], p[1]+v[1]]; \r\n });*/\n\n\t// FAST! (at least on V8, BUT WHY?!)\n\tvar result = [];\n\tfor (var i = 0; i < ps.length; i++) {\n\t\tresult.push([ps[i][0] + v[0], ps[i][1] + v[1]]);\n\t}\n\n\treturn result;\n}\n\n/**\r\n * Returns the given points rotated by a given angle given as the sine and cosine of the angle.\r\n * @param {number[][]} ps \r\n * @param {number} sinθ \r\n * @param {number} cosθ\r\n * @returns {number[][]}\r\n */\nfunction rotatePoints(ps, sinθ, cosθ) {\n\treturn ps.map(function (p) {\n\t\treturn rotate(p, sinθ, cosθ);\n\t});\n}\n\n/** \r\n * Returns an array of points by applying a translation and then rotation to the given points.\r\n * @param {number[][]} ps - The input points\r\n * @param {number[]} t - The translation vector\r\n * @param {number} sinθ \r\n * @param {number} cosθ\r\n * @returns {number[][]}\r\n **/\nfunction translateThenRotatePoints(ps, t, sinθ, cosθ) {\n\treturn ps.map(function (p) {\n\t\treturn rotate(add(p, t), sinθ, cosθ);\n\t});\n}\n\n/** \r\n * Returns an array of points by applying a rotation and then translation to the given points.\r\n * @param {number[][]} ps - The input points\r\n * @param {number[]} t - The translation vector\r\n * @param {number} sinθ \r\n * @param {number} cosθ\r\n * @returns {number[][]}\r\n **/\nfunction rotateThenTranslatePoints(ps, t, sinθ, cosθ) {\n\treturn ps.map(function (p) {\n\t\treturn add(rotate(p, sinθ, cosθ), t);\n\t});\n}\n\nmodule.exports = Vector;\n\n},{}]},{},[1])(1)\n});\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}]},{},[1])(1)\n});"]}